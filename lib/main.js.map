{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\nto_snake_case             = require 'just-snake-case'\n{ antlr: ANTLR          } = require 'rhombic'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass @Desql\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( P... ) ->\n    throw new Error \"^345^ configuration settings not supported\" if P.length > 0\n    @db = new DBay()\n    @_procure_infrastructure()\n    @_compile_sql()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT check if tables exist ###\n    @db SQL\"\"\"\n      create table raw_nodes (\n          id      integer not null,\n          xtra    integer not null default 1,\n          upid    integer,\n          type    text    not null,\n          idx1    integer,\n          idx2    integer,\n          lnr1    integer,\n          col1    integer,\n          lnr2    integer,\n          col2    integer,\n          txt     text,\n        primary key ( id, xtra ) -- ,\n        -- foreign key ( upid ) references raw_nodes ( id ) DEFERRABLE INITIALLY DEFERRED\n        );\"\"\"\n    # @db SQL\"\"\"\n    #   create view subcounts as select\n    #       id                    as id,\n    #       xtra                  as xtra,\n    #       count\n    #   ;\"\"\"\n    @db SQL\"\"\"\n      create view nodes as select\n          id                    as id,\n          xtra                  as xtra,\n          upid                  as upid,\n          size                  as size,\n          type                  as type,\n          idx1                  as idx1,\n          idx2                  as idx2,\n          lnr1                  as lnr1,\n          col1                  as col1,\n          lnr2                  as lnr2,\n          col2                  as col2,\n          txt                   as txt\n        from raw_nodes as r1\n        join ( select count(*) as size from raw_nodes as r2 /* where r2.upid = r1.id */ ) as r3\n        order by id, xtra\n      ;\"\"\"\n    # @db SQL\"\"\"\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    GUY.props.hide @, 'statements',\n      # insert_regular_node: @db.prepare_insert\n      #   into:       'raw_nodes'\n      #   exclude:    [ 'xtra', ]\n      #   returning:  '*'\n      insert_regular_node: @db.prepare SQL\"\"\"\n        insert into raw_nodes ( id, upid, type, idx1, idx2, lnr1, col1, lnr2, col2, txt )\n          values (\n            ( select coalesce( max( id ), 0 ) + 1 as id from raw_nodes ),\n            $upid, $type, $idx1, $idx2, $lnr1, $col1, $lnr2, $col2, $txt )\n          returning *;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( query ) ->\n    parser_cfg      =\n      doubleQuotedIdentifier: true\n    antlr           = { children: [ ( ANTLR.parse query, parser_cfg ).tree, ], }\n    R               = { type: 'query', nodes: [], }\n    @_build_tree query, antlr, null, 0, R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_tree: ( query, antlr, parent, level, tree ) ->\n    dent  = '  '.repeat level\n    for branch in antlr.children\n      type            = @_type_of_antler_node branch\n      position        = @_position_from_branch branch\n      txt             = null\n      txt             = query[ position.idx1 .. position.idx2 ] if position.idx1?\n      upid            = parent?.id ? null\n      flat_node       = { upid, type, position..., }\n      flat_node.txt   = if txt is '' then null else txt\n      @db SQL\"savepoint svp_name;\"\n      flat_node       = @statements.insert_regular_node.get flat_node\n      node            = { flat_node..., nodes: [], }\n      if branch.children?\n        @_build_tree query, branch, flat_node, level + 1, node\n      if ( node.type isnt 'terminal' ) and ( node.nodes.length is 0 )\n        @db SQL\"rollback transaction to savepoint svp_name;\" # , { svp_name, }\n      else\n        @db SQL\"release svp_name;\"\n        tree.nodes.push node\n      delete node.nodes if node.nodes.length is 0\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _type_of_antler_node: ( node ) ->\n    R = node.constructor.name\n    R = R.replace /(Node|Context)$/, ''\n    R = to_snake_case R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _position_from_branch: ( branch ) ->\n    if branch._symbol?\n      idx1  = branch._symbol.start\n      lnr1  = branch._symbol._line\n      col1  = branch._symbol._charPositionInLine + 1\n      idx2  = branch._symbol.stop\n      lnr2  = branch._symbol._line\n      col2  = branch._symbol._charPositionInLine + 1 + branch._symbol.stop - branch._symbol.start\n    else\n      idx1  = null\n      lnr1  = null\n      col1  = null\n      idx2  = null\n      lnr2  = null\n      col2  = null\n    return { idx1, lnr1, col1, idx2, lnr2, col2, }\n\n"
  ]
}