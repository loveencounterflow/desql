{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n# PATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  equals\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HDML }                  = require '../../../apps/hdml'\nX                         = require '../../hengist/lib/helpers'\n# { lets\n#   freeze }                = GUY.lft\n# { to_width }              = require 'to-width'\n# { DBay }                  = require '../../../apps/dbay'\nSQL                       = String.raw\n# { SQL }                   = DBay\n# { Sql }                   = require '../../../apps/dbay/lib/sql'\nxrpr                      = ( x ) -> ( require 'util' ).inspect x, {\n  colors: true, depth: Infinity, maxArrayLength: null, breakLength: Infinity, }\nto_snake_case             = require 'just-snake-case'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nshow_overview = ( db ) ->\n  info '#############################################################################'\n  X.tabulate \"dbay_tables\",                   db SQL\"select * from dbay_tables\"\n  X.tabulate \"dbay_unique_fields\",            db SQL\"select * from dbay_unique_fields\"\n  # X.tabulate \"dbay_fields_1\",                 db SQL\"select * from dbay_fields_1\"\n  X.tabulate \"dbay_fields\",                   db SQL\"select * from dbay_fields\"\n  X.tabulate \"dbay_foreign_key_clauses_1\",    db SQL\"select * from dbay_foreign_key_clauses_1\"\n  X.tabulate \"dbay_foreign_key_clauses_2\",    db SQL\"select * from dbay_foreign_key_clauses_2\"\n  # X.tabulate \"dbay_foreign_key_clauses_3\",    db SQL\"select * from dbay_foreign_key_clauses_3\"\n  X.tabulate \"dbay_foreign_key_clauses\",      db SQL\"select * from dbay_foreign_key_clauses\"\n  X.tabulate \"dbay_primary_key_clauses_1\",    db SQL\"select * from dbay_primary_key_clauses_1\"\n  X.tabulate \"dbay_primary_key_clauses\",      db SQL\"select * from dbay_primary_key_clauses\"\n  # X.tabulate \"dbay_field_clauses_1\",          db SQL\"select * from dbay_field_clauses_1\"\n  X.tabulate \"dbay_field_clauses\",            db SQL\"select * from dbay_field_clauses\"\n  # X.tabulate \"dbay_create_table_clauses\",     db SQL\"select * from dbay_create_table_clauses\"\n  # X.tabulate \"dbay_create_table_statements_1\", db SQL\"select * from dbay_create_table_statements_1\"\n  # X.tabulate \"dbay_create_table_statements_2\", db SQL\"select * from dbay_create_table_statements_2\"\n  # X.tabulate \"dbay_create_table_statements_3\", db SQL\"select * from dbay_create_table_statements_3\"\n  # X.tabulate \"dbay_create_table_statements_4\", db SQL\"select * from dbay_create_table_statements_4\"\n  # X.tabulate \"dbay_create_table_statements\",  db SQL\"select * from dbay_create_table_statements\"\n  # X.tabulate \"dbay_create_table_statements\",  db SQL\"\"\"\n  #   select\n  #       lnr,\n  #       tail,\n  #       substring( txt, 1, 100 ) as txt\n  #     from dbay_create_table_statements;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate = ( db, query ) -> X.tabulate query, db query\n\n#-----------------------------------------------------------------------------------------------------------\nqueries = [\n  SQL\"drop view if exists dbay_foreign_key_clauses_2;\",\n  SQL\"\"\"\n    create view dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  SQL\"create table d ( x integer ) strict;\"\n  SQL\"\"\"create table d ( x \"any\" );\"\"\"\n  SQL\"select a from t;\"\n  SQL\"insert into products ( nr, name ) values ( 1234, 'frob' );\"\n  SQL\"select a, b from s join t using ( c );\"\n  SQL\"select t1.a as alias, t2.b from s as t1 join t as t2 using ( c );\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t where e > 2;\"\n  SQL\"create view v as select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"select a, b, c, f( d ) as k from t join t2 using ( uuu ) where e > 2 order by k;\"\n  SQL\"\"\"select\n    42 as d;\n    select 'helo world' as greetings;\"\"\"\n  ]\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_rhombic_antlr = ->\n  CATALOG = require '../../../jzr-old/multimix/lib/cataloguing'\n  { antlr  } = require 'rhombic'\n  parser_cfg =\n    doubleQuotedIdentifier: true\n  lineage_cfg =\n    positionalRefsEnabled: true\n  # q = antlr.parse \"SELECT * FROM abc join users as u;\", parser_cfg\n  # for query in [ SQL\"\"\"select d as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select d + e + f( x ) as \"d1\" from a as a1;\"\"\", ]\n  # for query in [ SQL\"\"\"select * from a left join b where k > 1 order by m limit 1;\"\"\", ]\n  # for query in [ SQL\"SELECT 42 as a;\", ]\n  for query in [ queries[ queries.length - 1 ], ]\n    echo query\n    X.banner query\n    q = antlr.parse query, parser_cfg\n    debug CATALOG.all_keys_of q\n    show_antler_tree q.tree\n    # debug type_of q\n    # info q.getUsedTables()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of_antler_node = ( node ) ->\n  R = node.constructor.name\n  R = R.replace /(Node|Context)$/, ''\n  R = to_snake_case R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nshow_antler_tree = ( tree ) ->\n  objects_by_type = _show_antler_tree { children: [ tree, ], }, 0, {}\n  types           = ( k for k of objects_by_type ).sort()\n  # for type in types\n  #   d     = objects_by_type[ type ]\n  #   keys  = ( k for k of d when not k.startsWith '_' ).sort()\n  #   urge type, keys\n    # if d._line?\n    #   debug '^5600-1^', ( type_of d._line ), Object.keys d._line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n_show_antler_tree = ( tree, level, R ) ->\n  dent  = '  '.repeat level\n  # debug '^4656-1^' + dent + ( type_of tree ) + ' ' + rpr tree.text\n  for node in tree.children\n    #.......................................................................................................\n    # do =>\n    #   for k, v of node\n    #     continue unless v?\n    #     help '^5600-3^', k, ( type_of v ), ( Object.keys v )\n    #   if node._start?\n    #     info '^5600-4^', \"node._start?.index\", node._start?.index\n    #     info '^5600-5^', \"node._start?._line\", node._start?._line\n    #     info '^5600-6^', \"node._start?._charPositionInLine\", node._start?._charPositionInLine\n    #     info '^5600-7^', \"node._stop?._line\", node._stop?._line\n    #     info '^5600-8^', \"node._stop?._charPositionInLine\", node._stop?._charPositionInLine\n    #   if node._symbol?\n    #     info '^5600-9^', \"type_of node._symbol.start\", type_of node._symbol.start\n    #     info '^5600-9^', \"node._symbol.start\", node._symbol.start\n    #     info '^5600-9^', \"node._symbol.stop\", node._symbol.stop\n    #     info '^5600-9^', \"node._symbol.line\", node._symbol.line\n    #     info '^5600-9^', \"node._symbol._charPositionInLine\", node._symbol._charPositionInLine\n    #.......................................................................................................\n    type        = type_of_antler_node node\n    R[ type ]  ?= node\n    type_entry  = antler_types[ type ]\n    switch type_entry_type = type_of type_entry\n      when 'undefined'\n        warn '^4656-1^' + dent + type + ' ' + ( CND.gold rpr node.text )\n      when 'null'\n        whisper '^4656-1^' + dent + type + ' ' + ( rpr node.text )\n      when 'function'\n        whisper '^5600-2^', '------------------------------------------------------------'\n        info '^4656-1^' + dent + type + ' ' + ( CND.gold rpr node.text )\n        debug '^4656-1^', type_entry node\n      else\n        warn CND.reverse '^4656-1^' + dent + type + ' ' + ( CND.gold rpr node.text ) + \" unknown type entry type #{rpr type_entry_type}\"\n    if node.children?\n      _show_antler_tree node, level + 1, R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nantler_types =\n  #.........................................................................................................\n  terminal: null\n  #.........................................................................................................\n  select_clause: ( node ) ->\n    terminal  = node.children[ 0 ]\n    idx1      = terminal._symbol.start\n    idx2      = terminal._symbol.stop\n    lnr       = terminal._symbol._line\n    col       = terminal._symbol._charPositionInLine + 1\n    unless ( type = type_of_antler_node terminal ) is 'terminal'\n      throw new Error \"unexpected type #{rpr type}\"\n    unless ( /^select$/i  ).test ( text = terminal.text )\n      throw new Error \"unexpected terminal #{rpr text}\"\n    debug '^4353^', { type, text, idx1, idx2, lnr, col, subs: [], }\n  #.........................................................................................................\n  regular_query_specification:  null\n  query_primary_default:        null\n  query_term_default:           null\n  query:                        null\n  statement_default:            null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_rhombic_antlr()\n\n\n#   #---------------------------------------------------------------------------------------------------------\n#   _walk_statements_from_path: ( sql_path ) ->\n#     ### Given a path, iterate over SQL statements which are signalled by semicolons (`;`) that appear outside\n#     of literals and comments (and the end of input). ###\n#     ### thx to https://stackabuse.com/reading-a-file-line-by-line-in-node-js/ ###\n#     ### thx to https://github.com/nacholibre/node-readlines ###\n#     readlines       = new ( require 'n-readlines' ) sql_path\n#     #.......................................................................................................\n#     cfg           =\n#       regExp: ( require 'mysql-tokenizer/lib/regexp-sql92' )\n#     tokenize      = ( require 'mysql-tokenizer' ) cfg\n#     collector     = null\n#     # stream        = FS.createReadStream sql_path\n#     #.......................................................................................................\n#     flush = ->\n#       R         = collector.join ''\n#       collector = null\n#       return R\n#     #.......................................................................................................\n#     while ( line = readlines.next() ) isnt false\n#       for token, cur_idx in tokenize line + '\\n'\n#         if token is ';'\n#           ( collector ?= [] ).push token\n#           yield flush()\n#           continue\n#         # if token.startsWith '--'\n#         #   continue\n#         ( collector ?= [] ).push token\n#     #.......................................................................................................\n#     yield flush() if collector?\n#     return null\n\n"
  ]
}