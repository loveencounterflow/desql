{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB,EAhB5B;;;;;EAuBA,IAAC,CAAA,OAAD,CAAS,uBAAT,EAAkC,QAAA,CAAE,CAAF,CAAA;WAChC;MAAA,eAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAtD;MACA,oDAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;eAC5D,IAAC,CAAA,OAAD,QAAS,CAAC,CAAC,UAAU,aAAZ,QAAuB,eAAhC;MADoD,CADtD;MAGA,0BAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,SAAf;MAAT,CAHtD;MAIA,qBAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,IAAf;MAAT,CAJtD;MAKA,8BAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,aAAf;MAAT;IALtD;EADgC,CAAlC,EAvBA;;;EAgCA,IAAC,CAAA,OAAD,CAAS,0BAAT,EAAqC,QAAA,CAAE,CAAF,CAAA;WACnC;MAAA,eAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAtD;MACA,oDAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;eAC5D,IAAC,CAAA,OAAD,QAAS,CAAC,CAAC,UAAU,aAAZ,QAAuB,eAAhC;MADoD,CADtD;MAGA,0BAAA,EAAsD,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,SAAf;MAAT;IAHtD;EADmC,CAArC;AAhCA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n\n\n#===========================================================================================================\n# TRASH\n#-----------------------------------------------------------------------------------------------------------\n@declare 'dbay_trash_to_sql_cfg', ( x ) ->\n  \"@isa.object x\":                                      ( x ) -> @isa.object x\n  \"@type_of x.path in [ 'boolean', 'nonempty_text', ]\": ( x ) -> \\\n    @type_of x.path in [ 'boolean', 'nonempty_text', ]\n  \"@isa.boolean x.overwrite\":                           ( x ) -> @isa.boolean x.overwrite\n  \"@isa.boolean x.walk\":                                ( x ) -> @isa.boolean x.walk\n  \"@isa.boolean x._use_dot_cmds\":                       ( x ) -> @isa.boolean x._use_dot_cmds\n\n#-----------------------------------------------------------------------------------------------------------\n@declare 'dbay_trash_to_sqlite_cfg', ( x ) ->\n  \"@isa.object x\":                                      ( x ) -> @isa.object x\n  \"@type_of x.path in [ 'boolean', 'nonempty_text', ]\": ( x ) -> \\\n    @type_of x.path in [ 'boolean', 'nonempty_text', ]\n  \"@isa.boolean x.overwrite\":                           ( x ) -> @isa.boolean x.overwrite\n\n\n\n"
  ]
}