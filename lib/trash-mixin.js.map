{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/trash-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DESQL/MIXIN/TRASH'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nH                         = require 'dbay/lib/helpers'\n{ SQL }                   = H\nGUY                       = require 'guy'\nFS                        = require 'fs'\nPATH                      = require 'path'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@DBay_trash = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  _$trash_initialize: ->\n    @_trash_created = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  trash_to_sql: ( cfg ) ->\n    @types.validate.dbay_trash_to_sql_cfg ( cfg = { @constructor.C.defaults.dbay_trash_to_sql_cfg..., cfg..., } )\n    @create_trashlib()\n    @db.setv '_use_dot_cmds', cfg._use_dot_cmds\n    { path\n      overwrite } = cfg\n    iterator      = @db.query @db._trash_select_from_statements\n    if ( not cfg.path? ) or ( cfg.path is false )\n      return iterator if cfg.walk\n      return ( row.txt for row from iterator ).join '\\n'\n    return @_trash_with_fs_open_do path, 'sql', overwrite, ( { path, fd, } ) =>\n      FS.writeSync fd, row.txt + '\\n' for row from iterator\n      return path\n\n  #---------------------------------------------------------------------------------------------------------\n  trash_to_sqlite: ( cfg ) ->\n    @types.validate.dbay_trash_to_sqlite_cfg ( cfg = { @constructor.C.defaults.dbay_trash_to_sqlite_cfg..., cfg..., } )\n    ### TAINT consider to iterate over statements ###\n    { path\n      overwrite } = cfg\n    sql           = @trash_to_sql { walk: false, path: false, _use_dot_cmds: false, }\n    sqlt          = @db.constructor.new_bsqlt3_connection()\n    sqlt.exec sql\n    buffer        = sqlt.serialize()\n    if ( not cfg.path? ) or ( cfg.path is false )\n      return buffer\n    return @_trash_with_fs_open_do path, 'sqlite', overwrite, ( { path, fd, } ) =>\n      FS.writeSync fd, buffer\n      return path\n\n  #---------------------------------------------------------------------------------------------------------\n  _trash_with_fs_open_do: ( path, extension, overwrite, fn ) ->\n    ### TAINT implement `overwrite` ###\n    path  = @_trash_get_path path, extension\n    fd    = FS.openSync path, if overwrite then 'a' else 'ax'\n    try ( R = fn { path, fd, } ) finally FS.closeSync fd\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _trash_get_path: ( path, extension ) ->\n    return path if ( type = @types.type_of path ) is 'text'\n    unless path is true\n      throw new @db.E.DBay_internal_error '^desql/trash@1^', \"expected a text or `true`, got a #{type}\"\n    clasz = @db.constructor\n    return PATH.join clasz.C.autolocation, @db.rnd.get_random_filename extension\n\n  #---------------------------------------------------------------------------------------------------------\n  create_trashlib: ->\n    return null if @_trash_created\n    add_views @db\n    @_trash_created = true\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nadd_views = ( db ) ->\n  db.create_stdlib()\n  db.setv '_use_dot_cmds', true\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    -- ### NOTE this is a best-effort approach to recover the correct ordering for DDL statements\n    -- from the data provided by SQLite. It is not quite clear whether the ordering in\n    -- `sqlite_schema` can be relied upon and whether it is safe to assume that adding `row_number()`\n    -- to the query will not accidentally change the ordering in absence of an `order by` clause.\n    -- To attain a modicum of reliability the filtering has been separated from the raw numbering\n    -- to keep that aspect from juggling around rows.\n    -- ### TAINT replace existing `select from pragma_table_list` by `select from dbay_tables`\n    -- ### TAINT consider to always list `table_nr` along with `table_name` or to omit it where not needed (?)\n    drop view if exists dbay_tables;\n    create view dbay_tables as with v1 as ( select\n        row_number() over ()                                                      as table_nr,\n        type                                                                      as type,\n        name                                                                      as table_name\n      from sqlite_schema )\n    select\n        row_number() over ()                                                      as table_nr,\n        type                                                                      as type,\n        table_name                                                                as table_name\n      from v1\n      where true\n        and ( type in ( 'table', 'view' ) )\n        and ( table_name not like 'sqlite_%' )\n        and ( table_name not like 'dbay_%' )\n        and ( table_name not like '_dbay_%' )\n      order by table_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_unique_fields;\n    create view dbay_unique_fields as select\n        tb.table_name                                                             as table_name,\n        ii.name                                                                   as field_name,\n        il.seq                                                                    as index_idx,\n        il.name                                                                   as index_name\n      from dbay_tables as tb\n      join pragma_index_list( tb.table_name ) as il on ( true )\n      join pragma_index_info( il.name ) as ii on ( true )\n      where true\n        and ( il.origin = 'u' )\n        and ( il.\"unique\" )\n      ;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_fields_1;\n    create view _dbay_fields_1 as select\n        tb.table_nr                                                               as table_nr,\n        ti.cid + 1                                                                as field_nr,\n        tb.table_name                                                             as table_name,\n        tb.type                                                                   as table_type,\n        ti.name                                                                   as field_name,\n        case ti.type when '' then 'any' else lower( ti.type ) end                 as field_type,\n        not ti.\"notnull\"                                                          as nullable,\n        ti.dflt_value                                                             as fallback,\n        case ti.pk when 0 then null else ti.pk end                                as pk_nr,\n        ti.hidden                                                                 as hidden\n      from dbay_tables as tb\n      join pragma_table_xinfo( tb.table_name ) as ti on ( true )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_fields_2;\n    create view _dbay_fields_2 as select\n        fd.*,\n        case when uf.field_name is null then 0 else 1 end                         as is_unique\n      from _dbay_fields_1 as fd\n      left join dbay_unique_fields as uf using ( table_name, field_name )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_fields;\n    create view dbay_fields as select\n        table_nr                                                                  as table_nr,\n        field_nr                                                                  as field_nr,\n        count() over w - field_nr + 1                                             as field_rnr,\n        table_name                                                                as table_name,\n        table_type                                                                as table_type,\n        field_name                                                                as field_name,\n        field_type                                                                as field_type,\n        nullable                                                                  as nullable,\n        fallback                                                                  as fallback,\n        pk_nr                                                                     as pk_nr,\n        hidden                                                                    as hidden,\n        is_unique                                                                 as is_unique\n      from _dbay_fields_2\n      window w as ( partition by table_name )\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_foreign_key_clauses_1;\n    create view _dbay_foreign_key_clauses_1 as select\n        fk.id                                                                     as fk_id,\n        fk.seq                                                                    as fk_idx,\n        tb.table_nr                                                               as from_table_nr,\n        tb.table_name                                                             as from_table_name,\n        fk.\"from\"                                                                 as from_field_name,\n        fk.\"table\"                                                                as to_table_name,\n        coalesce( fk.\"to\", fk.\"from\" )                                            as to_field_name\n      from dbay_tables as tb\n      join pragma_foreign_key_list( tb.table_name ) as fk\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_foreign_key_clauses_2;\n    create view _dbay_foreign_key_clauses_2 as select distinct\n        fk_id                                                                     as fk_id,\n        from_table_nr                                                             as from_table_nr,\n        from_table_name                                                           as from_table_name,\n        group_concat( std_sql_i( from_field_name ), ', ' ) over w                 as from_field_names,\n        to_table_name                                                             as to_table_name,\n        group_concat( std_sql_i(   to_field_name ), ', ' ) over w                 as to_field_names\n      from _dbay_foreign_key_clauses_1\n      window w as (\n        partition by from_table_name, fk_id\n        order by fk_idx\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_id, fk_idx;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_foreign_key_clauses_3;\n    create view _dbay_foreign_key_clauses_3 as select\n        *,\n        count(*) over w                                                           as line_count\n      from _dbay_foreign_key_clauses_2\n      window w as (\n        partition by from_table_name );\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_foreign_key_clauses;\n    create view dbay_foreign_key_clauses as select\n        from_table_nr                                                             as table_nr,\n        from_table_name                                                           as table_name,\n        row_number() over w                                                       as fk_nr,\n        '  foreign key ( ' || from_field_names || ' ) references '\n          || std_sql_i( to_table_name )\n          || ' ( ' || to_field_names || ' )'\n          || case when row_number() over w = line_count then '' else ',' end      as fk_clause\n      from _dbay_foreign_key_clauses_3\n      window w as (\n        partition by from_table_name\n        order by fk_id desc\n        rows between unbounded preceding and unbounded following )\n      order by from_table_name, fk_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_primary_key_clauses_1;\n    create view _dbay_primary_key_clauses_1 as select distinct\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        group_concat( std_sql_i( field_name ), ', ' ) over w                      as field_names\n      from dbay_fields\n      where pk_nr is not null\n      window w as (\n        partition by table_name\n        order by pk_nr\n        rows between unbounded preceding and unbounded following )\n      order by table_name;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_primary_key_clauses;\n    create view dbay_primary_key_clauses as select distinct\n        p1.table_nr                                                               as table_nr,\n        p1.table_name                                                             as table_name,\n        '  primary key ( ' || p1.field_names || ' )'\n          || case when fc.fk_clause is null then '' else ',' end                  as pk_clause\n      from _dbay_primary_key_clauses_1     as p1\n      left join dbay_foreign_key_clauses  as fc on ( p1.table_name = fc.table_name and fc.fk_nr = 1 )\n      order by p1.table_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_field_clauses_1;\n    create view _dbay_field_clauses_1 as select\n        table_nr                                                                  as table_nr,\n        field_nr                                                                  as field_nr,\n        field_rnr                                                                 as field_rnr,\n        table_name                                                                as table_name,\n        field_name                                                                as field_name,\n        '    ' || std_sql_i( field_name ) || ' ' || field_type                    as fc_name_type,\n        case when not nullable         then ' not null'             else '' end   as fc_null,\n        case when is_unique            then ' unique'               else '' end   as fc_unique,\n        case when fallback is not null then ' default ' || fallback else '' end   as fc_default\n      from dbay_fields\n      order by table_nr, field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_field_clauses;\n    create view dbay_field_clauses as select\n        f1.table_nr                                                               as table_nr,\n        f1.field_nr                                                               as field_nr,\n        f1.table_name                                                             as table_name,\n        f1.field_name                                                             as field_name,\n        f1.fc_name_type || f1.fc_null || f1.fc_unique || f1.fc_default\n          || case when f1.field_rnr > 1 then ','\n             else case when fc.fk_clause is null and pc.pk_clause is null then ''\n             else ',' end end                                                     as field_clause\n      from _dbay_field_clauses_1           as f1\n      left join dbay_foreign_key_clauses  as fc on ( f1.table_name = fc.table_name and fc.fk_nr = 1 )\n      left join dbay_primary_key_clauses  as pc on ( f1.table_name = pc.table_name )\n      order by f1.table_nr, f1.field_nr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_clauses;\n    create view dbay_create_table_clauses as select\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        'create table ' || std_sql_i( table_name ) || ' ('                        as create_start,\n        ' );'                                                                     as create_end\n      from dbay_tables;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_drop_table_clauses;\n    create view dbay_drop_table_clauses as select\n        table_nr                                                                  as table_nr,\n        table_name                                                                as table_name,\n        'drop table if exists ' || std_sql_i( table_name ) || ';'                 as txt\n      from dbay_tables;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_create_table_statements_1;\n    create view _dbay_create_table_statements_1 as\n      with x as ( select * from dbay_create_table_clauses )\n      -- ...................................................................................................\n      select\n        null                                                                      as section_nr,\n        null                                                                      as table_nr,\n        null                                                                      as part_nr,\n        null                                                                      as lnr,\n        null                                                                      as table_name,\n        null                                                                      as txt\n      where false\n      -- ...................................................................................................\n      union all select distinct 10, null, 10, 1, null, '-- autogenerated'                     from x\n      union all select distinct 10, null, 10, 2, null, '\\b simplified\\n-- schema'             from x\n      union all select distinct 10, null, 10, 3, null,\n        case when std_getv( '_use_dot_cmds' ) then '.bail on' else '' end                     from x\n      union all select distinct 10, null, 10, 4, null, 'pragma foreign_keys = false;'         from x\n      union all select distinct 10, null, 10, 5, null, 'begin transaction;'                   from x\n      union all select distinct 90, null, 10, 1, null, 'commit;'                              from x\n      union all select distinct 90, null, 10, 2, null, 'pragma foreign_keys = true;'          from x\n      -- ...................................................................................................\n      union all select\n        15                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        null                                                                      as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        txt                                                                       as txt\n      from dbay_drop_table_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        20                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        create_start                                                              as txt\n      from dbay_create_table_clauses as ct\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        30                                                                        as part_nr,\n        field_nr                                                                  as lnr,\n        table_name                                                                as table_name,\n        field_clause                                                              as txt\n      from dbay_field_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        40                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        pk_clause                                                                 as txt\n      from dbay_primary_key_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        50                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        fk_clause                                                                 as txt\n      from dbay_foreign_key_clauses\n      -- ...................................................................................................\n      union all select\n        20                                                                        as section_nr,\n        table_nr                                                                  as table_nr,\n        90                                                                        as part_nr,\n        1                                                                         as lnr,\n        table_name                                                                as table_name,\n        create_end                                                                as txt\n      from dbay_create_table_clauses as ct\n      -- ...................................................................................................\n      order by section_nr, table_nr, part_nr, lnr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_create_table_statements_2;\n    create view _dbay_create_table_statements_2 as select\n        row_number() over ()                                                      as lnr,\n        1                                                                         as tail,\n        txt                                                                       as txt\n      from _dbay_create_table_statements_1 as r1\n      order by section_nr, table_nr, part_nr, r1.lnr;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_create_table_statements_3;\n    create view _dbay_create_table_statements_3 as select\n        r1.lnr                                                                    as lnr,\n        r2.lnr                                                                    as tail,\n        r2.part                                                                   as txt\n      from _dbay_create_table_statements_2 as r1,\n      std_str_split( r1.txt, '\\n' )       as r2\n      order by lnr, tail;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists _dbay_create_table_statements_4;\n    create view _dbay_create_table_statements_4 as select\n        r1.lnr                                                                    as lnr,\n        r1.tail                                                                   as tail,\n        lead( r1.txt ) over ()                                                    as nxt_txt,\n        r1.txt                                                                    as txt\n      from _dbay_create_table_statements_3 as r1\n      order by lnr, tail;\"\"\"\n  #---------------------------------------------------------------------------------------------------------\n  do =>\n    skip = false\n    db.create_table_function\n      name:         'dbay_trash_merge_lines'\n      parameters:   [ 'line', 'nxt_line', ]\n      columns:      [ 'vnr2', 'txt', ]\n      rows: ( line, nxt_line ) ->\n        # debug [ line, nxt_line, ]\n        if skip\n          skip = false\n        else if nxt_line.startsWith '\\b'\n          skip = true\n          yield [ 1, line + nxt_line[ 1 .. ], ]\n        else\n          yield [ 1, line, ]\n        return null\n  #---------------------------------------------------------------------------------------------------------\n  db SQL\"\"\"\n    drop view if exists dbay_create_table_statements;\n    create view dbay_create_table_statements as select\n        row_number() over ( order by r1.lnr, r1.tail, r2.vnr2 )                   as lnr,\n        r2.txt                                                                    as txt\n      from _dbay_create_table_statements_4     as r1,\n      dbay_trash_merge_lines( r1.txt, nxt_txt )  as r2\n      order by r1.lnr, r1.tail, r2.vnr2;\"\"\"\n  #-------------------------------------------------------------------------------------------------------\n  GUY.props.hide db, '_trash_select_from_statements', SQL\"select * from dbay_create_table_statements;\"\n  return db\n\n"
  ]
}